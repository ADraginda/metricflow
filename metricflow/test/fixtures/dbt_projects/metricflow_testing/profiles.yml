databricks:
  target: dev
  outputs:
    dev:
      type: databricks
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      token: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      http_path: "{{ env_var('DBT_ENV_SECRET_HTTP_PATH') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
postgres:
  target: dev
  outputs:
    dev:
      type: postgres
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      pass: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      dbname: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
redshift:
  target: dev
  outputs:
    dev:
      type: redshift
      host: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      port: "{{ env_var('DBT_PROFILE_PORT') | int }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      password: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      dbname: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
snowflake:
  target: dev
  outputs:
    dev:
      type: snowflake
      # The snowflake account is equivalent to the host value in the SqlAlchemy parsed URL
      account: "{{ env_var('DBT_ENV_SECRET_HOST') }}"
      user: "{{ env_var('DBT_ENV_SECRET_USER') }}"
      password: "{{ env_var('DBT_ENV_SECRET_PASSWORD') }}"
      warehouse: "{{ env_var('DBT_ENV_SECRET_WAREHOUSE') }}"
      database: "{{ env_var('DBT_ENV_SECRET_DATABASE') }}"
      schema: "{{ env_var('DBT_ENV_SECRET_SCHEMA') }}"
